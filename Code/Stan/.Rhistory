}
}
generate.coverage.plots()
generate.coverage.plots <- function(plot.iter = 10, chain.iter = 100, data.lower = -1, data.upper = 1,  n.x = 100,
poly.lower = -Inf, poly.upper = Inf, alpha = 1, prefit = model.prefit) {
poly.cases <- list(c(poly.order = 5, poly.type = 1), c(poly.order = 5, poly.type = 2))
x.values <- seq(from = data.lower, to = data.upper, length = n.x)
for(case in poly.cases) {
order.to.fit <- c(3,5,7)
beta.true <- (GeneratePolyData(data.lower = data.lower, data.upper = data.upper,
poly.order = as.numeric(case[1]), poly.type = as.numeric(case[2]),
n.data.points = n.x, sigma.noise = 0.1, noise.type = 1, noise.df = 1)) [3]
x.mat <- cbind(1, x.values)
data.order <- length(beta.true$beta.true) - 1
for(i in 2:data.order){
x.mat <- cbind(x.mat, x.values^i)
}
y.true <- x.mat %*% as.matrix(beta.true$beta.true)
for(q in order.to.fit) {
file.name <- paste("case", as.numeric(case[1]), "type", as.numeric(case[2]), "order", q, sep = "")
n.eff.container <- c()
r.hat.container <- c()
coverage.mat.80 <- matrix(0, nrow = plot.iter, ncol = n.x)
coverage.mat.95 <- matrix(0, nrow = plot.iter, ncol = n.x)
for(i in i:plot.iter) {
sim.data <- GeneratePolyData(data.lower = data.lower, data.upper = data.upper,
poly.order = as.numeric(case[1]), poly.type = as.numeric(case[2]),
n.data.points = n.x, sigma.noise = 0.1, noise.type = 1, noise.df = 1)
model.fit <- fit.mono.poly(x.values = sim.data$x.values, y.values = sim.data$y.values,
lower.bound = poly.lower, upper.bound =  poly.upper, poly.degree = q, alpha = alpha, n.new = 2*n.x + 1,
multi = TRUE, mc.num = 3, chains = 3, iter = chain.iter, prefit = prefit)
samples <- extract(model.fit)
temp.df <- as.data.frame(summary(model.fit))
n.eff.container <- rbind(n.eff.container, temp.df$summary.n_eff[grep("beta_final", row.names(temp.df))])
r.hat.container <- rbind(r.hat.container, temp.df$summary.Rhat[grep("beta_final", row.names(temp.df))])
colnames(r.hat.container) <- row.names(temp.df)
colnames(n.eff.container) <- row.names(temp.df)
beta.estmates <- apply(samples$beta_final, 2, mean)
poly.est <- x.mat %*% beta.estmates
beta.quantiles <- apply(samples$beta_final, 2, function(x){quantile(x=x, c(0.025, 0.1, 0.9, 0.975))})
fitted.vals <- x.mat %*% t(samples$beta_final)
fitted.quants <- apply(fitted.vals, 1, function(x){quantile(x=x, c(0.025, 0.1, 0.9, 0.975))})
logical.coverage.80 <- (y.true > fitted.quants[2,]) & (y.true < fitted.quants[3,])
coverage.mat.80[i,] <- t(logical.coverage.80)
logical.coverage.95 <- (y.true > fitted.quants[1,]) & (y.true < fitted.quants[4,])
coverage.mat.95[i,] <- t(logical.coverage.95)
}
write.csv(n.eff.container, paste(file.name, "_eff.csv"), sep = "")
write.csv(r.hat.container, paste(file.name, "_rhat.csv"), sep = "")
means.80 <- apply(coverage.mat.80, 2, mean)
means.95 <- apply(coverage.mat.95, 2, mean)
pdf(paste(file.name, "coverage80.pdf", sep = ""), width = 10, height = 5)
plot(x = x.values, y = means.80, type = "l", ylim = c(0,1))
abline(a = 0.8, b= 0, lty = 2)
dev.off()
pdf(paste(file.name, "coverage95.pdf", sep = ""), width = 10, height = 5)
plot(x = x.values, y = means.95, type = "l", ylim = c(0,1))
abline(a = 0.95, b= 0, lty = 2)
dev.off()
}
}
}
Q
generate.coverage.plots <- function(plot.iter = 10, chain.iter = 100, data.lower = -1, data.upper = 1,  n.x = 100,
poly.lower = -Inf, poly.upper = Inf, alpha = 1, prefit = model.prefit) {
poly.cases <- list(c(poly.order = 5, poly.type = 1), c(poly.order = 5, poly.type = 2))
x.values <- seq(from = data.lower, to = data.upper, length = n.x)
for(case in poly.cases) {
order.to.fit <- c(3,5,7)
beta.true <- (GeneratePolyData(data.lower = data.lower, data.upper = data.upper,
poly.order = as.numeric(case[1]), poly.type = as.numeric(case[2]),
n.data.points = n.x, sigma.noise = 0.1, noise.type = 1, noise.df = 1)) [3]
x.mat <- cbind(1, x.values)
data.order <- length(beta.true$beta.true) - 1
for(i in 2:data.order){
x.mat <- cbind(x.mat, x.values^i)
}
y.true <- x.mat %*% as.matrix(beta.true$beta.true)
for(q in order.to.fit) {
file.name <- paste("case", as.numeric(case[1]), "type", as.numeric(case[2]), "order", q, sep = "")
n.eff.container <- c()
r.hat.container <- c()
coverage.mat.80 <- matrix(0, nrow = plot.iter, ncol = n.x)
coverage.mat.95 <- matrix(0, nrow = plot.iter, ncol = n.x)
for(i in i:plot.iter) {
sim.data <- GeneratePolyData(data.lower = data.lower, data.upper = data.upper,
poly.order = as.numeric(case[1]), poly.type = as.numeric(case[2]),
n.data.points = n.x, sigma.noise = 0.1, noise.type = 1, noise.df = 1)
model.fit <- fit.mono.poly(x.values = sim.data$x.values, y.values = sim.data$y.values,
lower.bound = poly.lower, upper.bound =  poly.upper, poly.degree = q, alpha = alpha, n.new = 2*n.x + 1,
multi = TRUE, mc.num = 3, chains = 3, iter = chain.iter, prefit = prefit)
samples <- extract(model.fit)
temp.df <- as.data.frame(summary(model.fit))
n.eff.container <- rbind(n.eff.container, temp.df$summary.n_eff[grep("beta_final", row.names(temp.df))])
r.hat.container <- rbind(r.hat.container, temp.df$summary.Rhat[grep("beta_final", row.names(temp.df))])
colnames(r.hat.container) <- row.names(temp.df)
colnames(n.eff.container) <- row.names(temp.df)
beta.estmates <- apply(samples$beta_final, 2, mean)
poly.est <- x.mat %*% beta.estmates
beta.quantiles <- apply(samples$beta_final, 2, function(x){quantile(x=x, c(0.025, 0.1, 0.9, 0.975))})
fitted.vals <- x.mat %*% t(samples$beta_final)
fitted.quants <- apply(fitted.vals, 1, function(x){quantile(x=x, c(0.025, 0.1, 0.9, 0.975))})
logical.coverage.80 <- (y.true > fitted.quants[2,]) & (y.true < fitted.quants[3,])
coverage.mat.80[i,] <- t(logical.coverage.80)
logical.coverage.95 <- (y.true > fitted.quants[1,]) & (y.true < fitted.quants[4,])
coverage.mat.95[i,] <- t(logical.coverage.95)
}
write.csv(n.eff.container, paste(file.name, "_eff.csv"), sep = "")
write.csv(r.hat.container, paste(file.name, "_rhat.csv"), sep = "")
means.80 <- apply(coverage.mat.80, 2, mean)
means.95 <- apply(coverage.mat.95, 2, mean)
pdf(paste(file.name, "coverage80.pdf", sep = ""), width = 10, height = 5)
plot(x = x.values, y = means.80, type = "l", ylim = c(0,1))
abline(a = 0.8, b= 0, lty = 2)
dev.off()
pdf(paste(file.name, "coverage95.pdf", sep = ""), width = 10, height = 5)
plot(x = x.values, y = means.95, type = "l", ylim = c(0,1))
abline(a = 0.95, b= 0, lty = 2)
dev.off()
}
}
}
generate.coverage.plots()
model.fit
temp.df <- as.data.frame(summary(model.fit))
n.eff.container <- rbind(n.eff.container, temp.df$summary.n_eff[grep("beta_final", row.names(temp.df))])
r.hat.container <- rbind(r.hat.container, temp.df$summary.Rhat[grep("beta_final", row.names(temp.df))])
n.eff.container <- c()
r.hat.container <- c()
n.eff.container <- rbind(n.eff.container, temp.df$summary.n_eff[grep("beta_final", row.names(temp.df))])
r.hat.container <- rbind(r.hat.container, temp.df$summary.Rhat[grep("beta_final", row.names(temp.df))])
n.eff.container
temp.df[grep("beta_final", row.names(temp.df))]
temp.df$summary.n_eff[grep("beta_final", row.names(temp.df))]
row.names(temp.df$summary.n_eff[grep("beta_final", row.names(temp.df))])
row.names(temp.df)
row.names(temp.df)[grep("beta_final",row.names(temp.df))]
generate.coverage.plots <- function(plot.iter = 10, chain.iter = 100, data.lower = -1, data.upper = 1,  n.x = 100,
poly.lower = -Inf, poly.upper = Inf, alpha = 1, prefit = model.prefit) {
poly.cases <- list(c(poly.order = 5, poly.type = 1), c(poly.order = 5, poly.type = 2))
x.values <- seq(from = data.lower, to = data.upper, length = n.x)
for(case in poly.cases) {
order.to.fit <- c(3,5,7)
beta.true <- (GeneratePolyData(data.lower = data.lower, data.upper = data.upper,
poly.order = as.numeric(case[1]), poly.type = as.numeric(case[2]),
n.data.points = n.x, sigma.noise = 0.1, noise.type = 1, noise.df = 1)) [3]
x.mat <- cbind(1, x.values)
data.order <- length(beta.true$beta.true) - 1
for(i in 2:data.order){
x.mat <- cbind(x.mat, x.values^i)
}
y.true <- x.mat %*% as.matrix(beta.true$beta.true)
for(q in order.to.fit) {
file.name <- paste("case", as.numeric(case[1]), "type", as.numeric(case[2]), "order", q, sep = "")
n.eff.container <- c()
r.hat.container <- c()
coverage.mat.80 <- matrix(0, nrow = plot.iter, ncol = n.x)
coverage.mat.95 <- matrix(0, nrow = plot.iter, ncol = n.x)
for(i in i:plot.iter) {
sim.data <- GeneratePolyData(data.lower = data.lower, data.upper = data.upper,
poly.order = as.numeric(case[1]), poly.type = as.numeric(case[2]),
n.data.points = n.x, sigma.noise = 0.1, noise.type = 1, noise.df = 1)
model.fit <- fit.mono.poly(x.values = sim.data$x.values, y.values = sim.data$y.values,
lower.bound = poly.lower, upper.bound =  poly.upper, poly.degree = q, alpha = alpha, n.new = 2*n.x + 1,
multi = TRUE, mc.num = 3, chains = 3, iter = chain.iter, prefit = prefit)
samples <- extract(model.fit)
temp.df <- as.data.frame(summary(model.fit))
n.eff.container <- rbind(n.eff.container, temp.df$summary.n_eff[grep("beta_final", row.names(temp.df))])
r.hat.container <- rbind(r.hat.container, temp.df$summary.Rhat[grep("beta_final", row.names(temp.df))])
colnames(r.hat.container) <- row.names(temp.df)[grep("beta_final",row.names(temp.df))]
colnames(n.eff.container) <- row.names(temp.df)[grep("beta_final",row.names(temp.df))]
beta.estmates <- apply(samples$beta_final, 2, mean)
poly.est <- x.mat %*% beta.estmates
beta.quantiles <- apply(samples$beta_final, 2, function(x){quantile(x=x, c(0.025, 0.1, 0.9, 0.975))})
fitted.vals <- x.mat %*% t(samples$beta_final)
fitted.quants <- apply(fitted.vals, 1, function(x){quantile(x=x, c(0.025, 0.1, 0.9, 0.975))})
logical.coverage.80 <- (y.true > fitted.quants[2,]) & (y.true < fitted.quants[3,])
coverage.mat.80[i,] <- t(logical.coverage.80)
logical.coverage.95 <- (y.true > fitted.quants[1,]) & (y.true < fitted.quants[4,])
coverage.mat.95[i,] <- t(logical.coverage.95)
}
write.csv(n.eff.container, paste(file.name, "_eff.csv"), sep = "")
write.csv(r.hat.container, paste(file.name, "_rhat.csv"), sep = "")
means.80 <- apply(coverage.mat.80, 2, mean)
means.95 <- apply(coverage.mat.95, 2, mean)
pdf(paste(file.name, "coverage80.pdf", sep = ""), width = 10, height = 5)
plot(x = x.values, y = means.80, type = "l", ylim = c(0,1))
abline(a = 0.8, b= 0, lty = 2)
dev.off()
pdf(paste(file.name, "coverage95.pdf", sep = ""), width = 10, height = 5)
plot(x = x.values, y = means.95, type = "l", ylim = c(0,1))
abline(a = 0.95, b= 0, lty = 2)
dev.off()
}
}
}
generate.coverage.plots()
poly.cases <- list(c(poly.order = 5, poly.type = 1), c(poly.order = 5, poly.type = 2))
x.values <- seq(from = data.lower, to = data.upper, length = n.x)
order.to.fit <- c(3,5,7)
beta.true <- (GeneratePolyData(data.lower = data.lower, data.upper = data.upper,
poly.order = as.numeric(case[1]), poly.type = as.numeric(case[2]),
n.data.points = n.x, sigma.noise = 0.1, noise.type = 1, noise.df = 1)) [3]
x.mat <- cbind(1, x.values)
data.order <- length(beta.true$beta.true) - 1
for(i in 2:data.order){
x.mat <- cbind(x.mat, x.values^i)
}
y.true <- x.mat %*% as.matrix(beta.true$beta.true)
n.eff.container <- c()
r.hat.container <- c()
coverage.mat.80 <- matrix(0, nrow = plot.iter, ncol = n.x)
coverage.mat.95 <- matrix(0, nrow = plot.iter, ncol = n.x)
sim.data <- GeneratePolyData(data.lower = data.lower, data.upper = data.upper,
poly.order = as.numeric(case[1]), poly.type = as.numeric(case[2]),
n.data.points = n.x, sigma.noise = 0.1, noise.type = 1, noise.df = 1)
model.fit <- fit.mono.poly(x.values = sim.data$x.values, y.values = sim.data$y.values,
lower.bound = poly.lower, upper.bound =  poly.upper, poly.degree = q, alpha = alpha, n.new = 2*n.x + 1,
multi = TRUE, mc.num = 3, chains = 3, iter = chain.iter, prefit = prefit)
q
q <- 3
model.fit <- fit.mono.poly(x.values = sim.data$x.values, y.values = sim.data$y.values,
lower.bound = poly.lower, upper.bound =  poly.upper, poly.degree = q, alpha = alpha, n.new = 2*n.x + 1,
multi = TRUE, mc.num = 3, chains = 3, iter = chain.iter, prefit = prefit)
samples <- extract(model.fit)
temp.df <- as.data.frame(summary(model.fit))
n.eff.container <- rbind(n.eff.container, temp.df$summary.n_eff[grep("beta_final", row.names(temp.df))])
r.hat.container <- rbind(r.hat.container, temp.df$summary.Rhat[grep("beta_final", row.names(temp.df))])
r.hat.container
row.names(temp.df)[grep("beta_final",row.names(temp.df))]
n.eff.container <- rbind(n.eff.container, temp.df$summary.n_eff[grep("beta_final", row.names(temp.df))])
n.eff
n.eff.container
colnames(n.eff.container) <- row.names(temp.df)[grep("beta_final",row.names(temp.df))]
n.eff.container
beta.estmates <- apply(samples$beta_final, 2, mean)
poly.est <- x.mat %*% beta.estmates
x.mat
poly.est <- x.mat[1:q,] %*% beta.estmates
x.mat[1:q,]
x.mat[,1:q]
beta.estmates
generate.coverage.plots <- function(plot.iter = 10, chain.iter = 100, data.lower = -1, data.upper = 1,  n.x = 100,
poly.lower = -Inf, poly.upper = Inf, alpha = 1, prefit = model.prefit) {
poly.cases <- list(c(poly.order = 5, poly.type = 1), c(poly.order = 5, poly.type = 2))
x.values <- seq(from = data.lower, to = data.upper, length = n.x)
for(case in poly.cases) {
order.to.fit <- c(3,5,7)
beta.true <- (GeneratePolyData(data.lower = data.lower, data.upper = data.upper,
poly.order = as.numeric(case[1]), poly.type = as.numeric(case[2]),
n.data.points = n.x, sigma.noise = 0.1, noise.type = 1, noise.df = 1)) [3]
x.mat <- cbind(1, x.values)
data.order <- length(beta.true$beta.true) - 1
for(i in 2:data.order){
x.mat <- cbind(x.mat, x.values^i)
}
y.true <- x.mat %*% as.matrix(beta.true$beta.true)
for(q in order.to.fit) {
file.name <- paste("case", as.numeric(case[1]), "type", as.numeric(case[2]), "order", q, sep = "")
n.eff.container <- c()
r.hat.container <- c()
coverage.mat.80 <- matrix(0, nrow = plot.iter, ncol = n.x)
coverage.mat.95 <- matrix(0, nrow = plot.iter, ncol = n.x)
x.mat.apparent <- cbind(1,x.values)
for(i in 2:q) {
x.mat.apparent <- cbind(x.mat.apparent, x.values^i)
}
for(i in i:plot.iter) {
sim.data <- GeneratePolyData(data.lower = data.lower, data.upper = data.upper,
poly.order = as.numeric(case[1]), poly.type = as.numeric(case[2]),
n.data.points = n.x, sigma.noise = 0.1, noise.type = 1, noise.df = 1)
model.fit <- fit.mono.poly(x.values = sim.data$x.values, y.values = sim.data$y.values,
lower.bound = poly.lower, upper.bound =  poly.upper, poly.degree = q, alpha = alpha, n.new = 2*n.x + 1,
multi = TRUE, mc.num = 3, chains = 3, iter = chain.iter, prefit = prefit)
samples <- extract(model.fit)
temp.df <- as.data.frame(summary(model.fit))
n.eff.container <- rbind(n.eff.container, temp.df$summary.n_eff[grep("beta_final", row.names(temp.df))])
r.hat.container <- rbind(r.hat.container, temp.df$summary.Rhat[grep("beta_final", row.names(temp.df))])
colnames(r.hat.container) <- row.names(temp.df)[grep("beta_final",row.names(temp.df))]
colnames(n.eff.container) <- row.names(temp.df)[grep("beta_final",row.names(temp.df))]
beta.estmates <- apply(samples$beta_final, 2, mean)
poly.est <- x.mat.apparent %*% beta.estmates
beta.quantiles <- apply(samples$beta_final, 2, function(x){quantile(x=x, c(0.025, 0.1, 0.9, 0.975))})
fitted.vals <- x.mat.apparent %*% t(samples$beta_final)
fitted.quants <- apply(fitted.vals, 1, function(x){quantile(x=x, c(0.025, 0.1, 0.9, 0.975))})
logical.coverage.80 <- (y.true > fitted.quants[2,]) & (y.true < fitted.quants[3,])
coverage.mat.80[i,] <- t(logical.coverage.80)
logical.coverage.95 <- (y.true > fitted.quants[1,]) & (y.true < fitted.quants[4,])
coverage.mat.95[i,] <- t(logical.coverage.95)
}
write.csv(n.eff.container, paste(file.name, "_eff.csv"), sep = "")
write.csv(r.hat.container, paste(file.name, "_rhat.csv"), sep = "")
means.80 <- apply(coverage.mat.80, 2, mean)
means.95 <- apply(coverage.mat.95, 2, mean)
pdf(paste(file.name, "coverage80.pdf", sep = ""), width = 10, height = 5)
plot(x = x.values, y = means.80, type = "l", ylim = c(0,1))
abline(a = 0.8, b= 0, lty = 2)
dev.off()
pdf(paste(file.name, "coverage95.pdf", sep = ""), width = 10, height = 5)
plot(x = x.values, y = means.95, type = "l", ylim = c(0,1))
abline(a = 0.95, b= 0, lty = 2)
dev.off()
}
}
}
generate.coverage.plots()
warnings()
generate.coverage.plots <- function(plot.iter = 10, chain.iter = 100, data.lower = -1, data.upper = 1,  n.x = 100,
poly.lower = -Inf, poly.upper = Inf, alpha = 1, prefit = model.prefit) {
poly.cases <- list(c(poly.order = 5, poly.type = 1), c(poly.order = 5, poly.type = 2))
x.values <- seq(from = data.lower, to = data.upper, length = n.x)
for(case in poly.cases) {
order.to.fit <- c(3,5,7)
beta.true <- (GeneratePolyData(data.lower = data.lower, data.upper = data.upper,
poly.order = as.numeric(case[1]), poly.type = as.numeric(case[2]),
n.data.points = n.x, sigma.noise = 0.1, noise.type = 1, noise.df = 1)) [3]
x.mat <- cbind(1, x.values)
data.order <- length(beta.true$beta.true) - 1
for(i in 2:data.order){
x.mat <- cbind(x.mat, x.values^i)
}
y.true <- x.mat %*% as.matrix(beta.true$beta.true)
for(q in order.to.fit) {
file.name <- paste("case", as.numeric(case[1]), "type", as.numeric(case[2]), "order", q, sep = "")
n.eff.container <- c()
r.hat.container <- c()
coverage.mat.80 <- matrix(0, nrow = plot.iter, ncol = n.x)
coverage.mat.95 <- matrix(0, nrow = plot.iter, ncol = n.x)
x.mat.apparent <- cbind(1,x.values)
for(i in 2:q) {
x.mat.apparent <- cbind(x.mat.apparent, x.values^i)
}
for(i in i:plot.iter) {
sim.data <- GeneratePolyData(data.lower = data.lower, data.upper = data.upper,
poly.order = as.numeric(case[1]), poly.type = as.numeric(case[2]),
n.data.points = n.x, sigma.noise = 0.1, noise.type = 1, noise.df = 1)
model.fit <- fit.mono.poly(x.values = sim.data$x.values, y.values = sim.data$y.values,
lower.bound = poly.lower, upper.bound =  poly.upper, poly.degree = q, alpha = alpha, n.new = 2*n.x + 1,
multi = TRUE, mc.num = 3, chains = 3, iter = chain.iter, prefit = prefit)
samples <- extract(model.fit)
temp.df <- as.data.frame(summary(model.fit))
n.eff.container <- rbind(n.eff.container, temp.df$summary.n_eff[grep("beta_final", row.names(temp.df))])
r.hat.container <- rbind(r.hat.container, temp.df$summary.Rhat[grep("beta_final", row.names(temp.df))])
colnames(r.hat.container) <- row.names(temp.df)[grep("beta_final",row.names(temp.df))]
colnames(n.eff.container) <- row.names(temp.df)[grep("beta_final",row.names(temp.df))]
beta.estmates <- apply(samples$beta_final, 2, mean)
poly.est <- x.mat.apparent %*% beta.estmates
beta.quantiles <- apply(samples$beta_final, 2, function(x){quantile(x=x, c(0.025, 0.1, 0.9, 0.975))})
fitted.vals <- x.mat.apparent %*% t(samples$beta_final)
fitted.quants <- apply(fitted.vals, 1, function(x){quantile(x=x, c(0.025, 0.1, 0.9, 0.975))})
logical.coverage.80 <- (y.true > fitted.quants[2,]) & (y.true < fitted.quants[3,])
coverage.mat.80[i,] <- t(logical.coverage.80)
logical.coverage.95 <- (y.true > fitted.quants[1,]) & (y.true < fitted.quants[4,])
coverage.mat.95[i,] <- t(logical.coverage.95)
}
write.csv(n.eff.container, paste(file.name, "_eff.csv", sep = ""))
write.csv(r.hat.container, paste(file.name, "_rhat.csv", sep = ""))
means.80 <- apply(coverage.mat.80, 2, mean)
means.95 <- apply(coverage.mat.95, 2, mean)
pdf(paste(file.name, "coverage80.pdf", sep = ""), width = 10, height = 5)
plot(x = x.values, y = means.80, type = "l", ylim = c(0,1))
abline(a = 0.8, b= 0, lty = 2)
dev.off()
pdf(paste(file.name, "coverage95.pdf", sep = ""), width = 10, height = 5)
plot(x = x.values, y = means.95, type = "l", ylim = c(0,1))
abline(a = 0.95, b= 0, lty = 2)
dev.off()
}
}
}
rm(list=ls(all=TRUE))
y
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
options()$mc.cores
rm(list=ls(all=TRUE))
q()
y
rm(list=ls(all=TRUE))
q()
y
rm(list=ls(all=TRUE))
q()
y
class(model.prefit)
q()
y
rm(list=ls(all=TRUE))
q()
y
samples <- extract(model.fit, "beta_final")
str(samples)
plot(samples)
plot(as.coda.samples(samples))
library(coda)
plot(as.coda.samples(samples))
plot(coda.samples(samples))
library(help=coda)
traceplot(samples)
summary.mcmc(samples)
as.matrix.mcmc(samples)
plot(samples[[1]])
str(samples)
matplot(1:250000, samples[[1]][1:250000,])
m
ind <- 1:250000
matplot(ind, cbind(samples[[1]][ind,1], samples[[1]][ind+250000,1]))
var <- 1 ; matplot(ind, cbind(samples[[1]][ind,var], samples[[1]][ind+250000,var]), type="l")
var <- 2 ; matplot(ind, cbind(samples[[1]][ind,var], samples[[1]][ind+250000,var]), type="l")
var <- 3 ; matplot(ind, cbind(samples[[1]][ind,var], samples[[1]][ind+250000,var]), type="l")
ind <- 249500:250000
var <- 3 ; matplot(ind, cbind(samples[[1]][ind,var], samples[[1]][ind+250000,var]), type="l")
ind <- 249000:250000
var <- 3 ; matplot(ind, cbind(samples[[1]][ind,var], samples[[1]][ind+250000,var]), type="l")
var <- 4 ; matplot(ind, cbind(samples[[1]][ind,var], samples[[1]][ind+250000,var]), type="l")
var <- 5 ; matplot(ind, cbind(samples[[1]][ind,var], samples[[1]][ind+250000,var]), type="l")
var <- 6 ; matplot(ind, cbind(samples[[1]][ind,var], samples[[1]][ind+250000,var]), type="l")
var <- 7 ; matplot(ind, cbind(samples[[1]][ind,var], samples[[1]][ind+250000,var]), type="l")
var <- 8 ; matplot(ind, cbind(samples[[1]][ind,var], samples[[1]][ind+250000,var]), type="l")
var <- 9 ; matplot(ind, cbind(samples[[1]][ind,var], samples[[1]][ind+250000,var]), type="l")
var <- 10 ; matplot(ind, cbind(samples[[1]][ind,var], samples[[1]][ind+250000,var]), type="l")
var <- 11 ; matplot(ind, cbind(samples[[1]][ind,var], samples[[1]][ind+250000,var]), type="l")
var <- 12 ; matplot(ind, cbind(samples[[1]][ind,var], samples[[1]][ind+250000,var]), type="l")
samples <- extract(model.fit, "mu_new")
str(samples)
var <- 1 ; matplot(ind, cbind(samples[[1]][ind,var], samples[[1]][ind+250000,var]), type="l")
var <- 52 ; matplot(ind, cbind(samples[[1]][ind,var], samples[[1]][ind+250000,var]), type="l")
var <- 400 ; matplot(ind, cbind(samples[[1]][ind,var], samples[[1]][ind+250000,var]), type="l")
var <- 76 ; matplot(ind, cbind(samples[[1]][ind,var], samples[[1]][ind+250000,var]), type="l")
range(fitted.quants)
miny
range(fitted.quants)
str(fitted.quants)
range(fitted.quants)
str(fitted.vals)
x
str(fitted.quants)
fitted.quants[,1]
str(pred.quants)
help(polygon)
help(polygon)
range(onechild$height)
range(onechild$height)
q
rm(list=ls(all=TRUE))
y
source("StanFit-BAT.R")
rm(list=ls(all=TRUE))
q()
y
source("StanFit-BAT.R")
ls()
dim(x.mat)
length(beta.estmates)
q
length(beta.estmates)
K <- 5
q <- 11
rm(list=ls(all=TRUE))
q()
y
source("StanFit-BAT.R")
beta.estimates
beta.estmates
launch_shinystan(model.fit)
rm(list=ls(all=TRUE))
q()
y
source("StanFit-BAT.R")
rm(list=ls(all=TRUE))
q()
y
source("StanFit-BAT.R")
rm(list=ls(all=TRUE))
q()
y
source("StanFit-BAT.R")
launch_shinystan(model.fit)
rm(list=ls(all=TRUE))
q()
y
source("StanFit-BAT.R")
rm(list=ls(all=TRUE))
q()
y
help(saveRDS)
readRDS("MonPolyV0_0_3.1.rds")
ls()
readRDS("MonPolyV0_0_3.1.rds")
tt <- readRDS("MonPolyV0_0_3.1.rds")
str(tt)
memory.size(tt)
help(memory.size)
size
apropos(size)
apropos("size")
object.size(tt)
rm(list=ls(all=TRUE))
y
