install.packages(c(##
"RBGL", "RGtk2", "RODBC", "Rgraphviz", "Rmpfr", "XML",
"akima", "amap", "e1071", ## "hdf5",
"gmp", "igraph", "polyclip", "rjags", "tkrplot",
"xml2",
"cairoDevice", "RcppArmadillo"
))
chooseCRANmirror()
setRepositories()
install.packages(c(##
"RBGL", "RGtk2", "RODBC", "Rgraphviz", "Rmpfr", "XML",
"akima", "amap", "e1071", ## "hdf5",
"gmp", "igraph", "polyclip", "rjags", "tkrplot",
"xml2",
"cairoDevice", "RcppArmadillo"
))
install.packages(c("rstan", "shinystan"))
install.packages(c("emdbook", "gWidgetsRGtk2"))
install.packages(c(##
"AER",
"BB", "BSDA", "Bessel", "Bhat", "BradleyTerry2",
"Brobdingnag",
"DAAG", "DAAGbio", "DAAGxtras",
"Devore7", "DynDoc",
"ElemStatLearn", "Fahrmeir",
"HSAUR", "ISLR", "ISwR",
"KMsurv",
"MEMSS", "MonoPoly", "MPV",
"RGraphics", "RLRsim",
"RUnit", "Rcmdr", "RBioinf",
"R2WinBUGS", "BRugs", "rbugs", ## only on Windows
"SASmixed", "SenSrivastava", "Sleuth2", "Sleuth3",
"SemiPar",
"TeachingDemos", "TraMineR", "UsingR", "WWGbook", "VGAM",
"abind", "alr3", "aod", "ape", "arm",
"bbmle", "bookdown", "bootstrap", "brglm",
"cclust", "cgam", "coin", "copula", "ctv",
"date", "dispmod", "dr", "dyn", "dynlm",
"ecodist", "effects", "ellipse", "emdbook",
"fBasics", "fImport", "faraway", "flexmix",
"fortunes",
"gam", "gamair", "gee", "geepack", "ggm",
"gnm", "gplots", "gss",
"hexbin", "hmm.discnp", "hts",
"ipred", "its",
"lars", "lasso2", "limma",
"lmeSplines", "lmtest", "locfit",
"logspline", "meta",
"mapproj", "marray", "mclust", # "mclust02",
"mda", "mlbench", "mlmRev", "modeltools", "msm",
"nlmeU", "nnls", "nor1mix", "nortest", "oz",
"party", # "pinktoe",
"pixmap", "plm", "plotrix",
"polynom",
"randomForest", "relax", "relimp", "reshape",
"rmeta", "robustbase", "rpanel",
"scatterplot3d", "sem", "sgeostat",
"sm", # "sma",
"som", "sos", "spatstat", "statmod", "strucchange",
"sudoku", "systemfit",
"tensor", "tkWidgets", "tripack",
"tseries", "tufte", "tweedie",
"vcd", "vegan",
"wavethresh", "widgetTools", "weaver",
"xts"
))
rm(list=ls(all=TRUE))
q()
getwd()
q()
markdown::pandoc_version()
rmarkdown::pandoc_version()
getwd()
vignette("rstan")
help(vignette)
browseVignettes("rstan")
vignette("rstan")
browseVignettes("rstan")
browseVignettes(pack="rstan")
browseVignettes(pack="rstanarm")
install.packages(c("rstanarm", "rstantools"))
browseVignettes(pack="rstanarm")
vignette("stan_aov")
vignette(pack="rstanarm")
vignette("aov", pack="rstanarm")
vignette("aov", pack="rstanarm")
install.packages("openssl")
install.packages("git2r")
vignette("binomial", pack="rstanarm")
vignette("rstan")
vignette("rstan")
browseVignettes("rstan")
browseVignettes()
vignette("rstan")
install.packages(c("copula", "gmp", "HistData", "mgcv", "prodlim", "Rcpp", "rprojroot", "shiny", "StanHeaders", "VGAM"))
library(rstan)
stan_demo(384)
stan_demo(384)
stan_demo()
setwd("G:/Dropbox/BayesianMonPol/Submission/Stan")
library(MonoPoly)
library(fda)
install.packages("fda")
library(fda)
library(rstan)
rstan_options(auto_write = FALSE)
options(mc.cores = parallel::detectCores())
x <- with(onechild, (day-min(day))/diff(range(day)))
y <- onechild$height
miny <- min(y)
ry <- diff(range(y))
y <- (y-miny)/ry
N <- length(x)
plot(x,y)
q <- 9
lower.bound <- 0
upper.bound <- Inf
alpha <- 1
if (lower.bound == -Inf) {
if (upper.bound == Inf) {
op.mode <- 1 # whole real line
k <- (q - 1)/2
} else {
op.mode <- 2 # (-inf, b]
if(q %% 2 == 0) {
k <- q / 2
}  else {
k <- (q - 1) / 2
}
}
} else {
if (upper.bound == Inf) {
op.mode <- 3 # [a, Inf)
if(q %% 2 == 0) {
k <- q / 2
}  else {
k <- (q - 1) / 2
}
} else {
op.mode <- 4 # [a,b]
if(q %% 2 == 0) {
k <- q / 2
}  else {
k <- (q - 1) / 2
}
}
}
if ( (poly.degree %% 2 == 0) & (op.mode == 1) ) {
stop("Fitting a monotonic polynomial to the whole real line requires q to be odd")
}
Nnew <- 101
xnew <- seq(from=min(x),to=max(x),length=Nnew)
data.in <- list(N = N, q = q, K = k,
operation_mode = op.mode,
y = y, x = x,
a = lower.bound, b = upper.bound,
alpha = alpha, Nnew = Nnew,
xnew = xnew)
iter <- 5000
model.fit <- stan("MonPolyV0_0_4.stan", data = data.in,
iter = iter, seed = 170117, chains = 2, cores = 2)
