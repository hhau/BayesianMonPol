abline(a = 0.8, b= 0, lty = 2, lwd = 2, col = "grey")
}
}
mtext("Coverage Probabilites", outer = T, cex = 1.5)
dev.off()
}
# Simulate some data so that we can compile a prefit object for Stan
simulated.data <- GeneratePolyData(data.lower = -1, data.upper =  1,
poly.order = 5, poly.type = 2,
n.data.points = 50, sigma.noise = 0.2,
noise.type = 1, noise.df = 1)
x.new.temp <- seq(from = -1, to = 1,
length = 2*length(simulated.data$x.values)+1)
data.in.temp <- list(N = length(simulated.data$y.values), q = 1, K = 1000,
operation_mode = 1,
y = simulated.data$y.values, x = simulated.data$x.values,
a = -Inf, b = Inf,
alpha = 1, Nnew = 2*length(simulated.data$x.values)+1,
xnew = x.new.temp)
model.prefit <- stan("MonPolyV0_0_4.stan", chains = 0, data = data.in.temp)
generateCoveragePlots(plot.iter = 10, chain.iter = 200)
generateCoveragePlots(plot.iter = 100, chain.iter = 800)
generateCoveragePlots(plot.iter = 800, chain.iter = 2000)
library(MonoPoly)
library(fda)
library(rstan)
rstan_options(auto_write = FALSE)
options(mc.cores = parallel::detectCores())
##
## Data is the onechild data from package fda
## Rescale data so that x and y are both in [0, 1]
## Remember how y was scaled to undo the scaling in later plots
##
x <- with(onechild, (day-min(day))/diff(range(day)))
y <- onechild$height
miny <- min(y)
ry <- diff(range(y))
y <- (y-miny)/ry
N <- length(x)
##
## Initial plot of the data
##
plot(x,y)
library(MonoPoly)
library(fda)
library(rstan)
rstan_options(auto_write = FALSE)
options(mc.cores = parallel::detectCores())
##
## Data is the onechild data from package fda
## Rescale data so that x and y are both in [0, 1]
## Remember how y was scaled to undo the scaling in later plots
##
x <- with(onechild, (day-min(day))/diff(range(day)))
y <- onechild$height
miny <- min(y)
ry <- diff(range(y))
y <- (y-miny)/ry
N <- length(x)
##
## Initial plot of the data
##
plot(x,y)
##
## Choose degree of polynomial to fit,
## as well as the region of monotonicity
## Here we want to have a polynomial monotone on [0, infinity)
## we also specific the polynomial as monotone increasing,
## by choosing alpha to be one
##
q <- 9
lower.bound <- 0
upper.bound <- Inf
alpha <- 1
##
## Given order of polynomial and bounds, figure out K and op.mode
##
##
op.mode <- 0
if (lower.bound == -Inf) {
if (upper.bound == Inf) {
op.mode <- 1 # whole real line
k <- (poly.degree - 1)/2
} else {
op.mode <- 2 # (-inf, b]
if(poly.degree %% 2 == 0) {
k <- poly.degree / 2
}  else {
k <- (poly.degree - 1) / 2
}
}
} else {
if (upper.bound == Inf) {
op.mode <- 3 # [a, Inf)
if(poly.degree %% 2 == 0) {
k <- poly.degree / 2
}  else {
k <- (poly.degree - 1) / 2
}
} else {
op.mode <- 4 # [a,b]
if(poly.degree %% 2 == 0) {
k <- poly.degree / 2
}  else {
k <- (poly.degree - 1) / 2
}
}
}
if ( (poly.degree %% 2 == 0) & (op.mode == 1) ) {
stop("Fitting a monotonic polynomial to the whole real line requires q to be odd")
}
##
## Grid of values on which we want to have predictions
##
Nnew <- 101
xnew <- seq(from=min(x),to=max(x),length=Nnew)
##
## Put all the data to be passed to stan in a named list
##
data.in <- list(N = N, q = q, K = K,
operation_mode = op.mode,
y = y, x = x,
a = lower.bound, b = upper.bound,
alpha = alpha, Nnew = Nnew,
xnew = xnew)
##
## Decide on number of iterations, this depends partly on the degree
## of the polynomial.
## See the 00README file
##
iter <- 50000
##
## Fit the model with stan
##
model.fit <- stan("MonPolyV0_0_4.stan", data = data.in,
iter = iter, seed = 170117, chains = 2, cores = 2)
op.mode <- 0
if (lower.bound == -Inf) {
if (upper.bound == Inf) {
op.mode <- 1 # whole real line
k <- (q - 1)/2
} else {
op.mode <- 2 # (-inf, b]
if(q %% 2 == 0) {
k <- q / 2
}  else {
k <- (q - 1) / 2
}
}
} else {
if (upper.bound == Inf) {
op.mode <- 3 # [a, Inf)
if(q %% 2 == 0) {
k <- q / 2
}  else {
k <- (q - 1) / 2
}
} else {
op.mode <- 4 # [a,b]
if(q %% 2 == 0) {
k <- q / 2
}  else {
k <- (q - 1) / 2
}
}
}
if ( (poly.degree %% 2 == 0) & (op.mode == 1) ) {
stop("Fitting a monotonic polynomial to the whole real line requires q to be odd")
}
##
## Grid of values on which we want to have predictions
##
Nnew <- 101
xnew <- seq(from=min(x),to=max(x),length=Nnew)
##
## Put all the data to be passed to stan in a named list
##
data.in <- list(N = N, q = q, K = K,
operation_mode = op.mode,
y = y, x = x,
a = lower.bound, b = upper.bound,
alpha = alpha, Nnew = Nnew,
xnew = xnew)
##
## Decide on number of iterations, this depends partly on the degree
## of the polynomial.
## See the 00README file
##
iter <- 50000
##
## Fit the model with stan
##
model.fit <- stan("MonPolyV0_0_4.stan", data = data.in,
iter = iter, seed = 170117, chains = 2, cores = 2)
data.in <- list(N = N, q = q, K = k,
operation_mode = op.mode,
y = y, x = x,
a = lower.bound, b = upper.bound,
alpha = alpha, Nnew = Nnew,
xnew = xnew)
##
## Decide on number of iterations, this depends partly on the degree
## of the polynomial.
## See the 00README file
##
iter <- 50000
##
## Fit the model with stan
##
model.fit <- stan("MonPolyV0_0_4.stan", data = data.in,
iter = iter, seed = 170117, chains = 2, cores = 2)
library(shinystan)
launch_shinystan(model.fit)
beta.final.mat.samples <- extract(model.fit, "beta_final")
str(beta.final.mat.samples)
plot(beta.final.mat.samples[[1]][,1])
plot(beta.final.mat.samples[[1]][,1], type = "l")
plot(beta.final.mat.samples[[1]][,10], type = "l")
source('~/.active-rstudio-document', echo=TRUE)
library(fda)
library(MonoPoly)
help("evalPol")
beta.final.mat <- apply(beta.final.mat.samples[[1]], c(2:3), mean)
beta.final.samples <- extract(model.fit, "beta_final")
beta.final.mat <- apply(beta.final.samples[[1]], 2, mean)
beta.final <- apply(beta.final.samples[[1]], 2, mean)
beta.final
lines(xnew, evalPol(xnew, beta.final))
mupred_smp <- extract(model.fit, "mupred")[[1]]
cred.intervals <- apply(mupred_smp, 2, function(x) quantile(x=x, c(0.025, 0.975)))
cred.intervals <- ry * cred.intervals + miny  ## undo the scaling of the y axis
lines(x = xnew, cred.intervals[1,], col = "black", lty = 3)
lines(x = xnew, cred.intervals[2,], col = "black", lty = 3)
ypred_smp <- extract(model.fit, "ypred")[[1]]
pred.intervals <- apply(ypred_smp, 2,  function(x) quantile(x=x, c(0.025, 0.975)))
pred.intervals <- ry * pred.intervals + miny  ## undo the scaling of the y axis
lines(x = xnew, y = pred.intervals[1,], col = "cadetblue", lty = 1)
lines(x = xnew, y = pred.intervals[2,], col = "cadetblue", lty = 1)
cred.intervals[1,]
xnew
cred.intervals <- apply(mupred_smp, 2, function(x) quantile(x=x, c(0.025, 0.975)))
lines(x = xnew, cred.intervals[1,], col = "black", lty = 3)
lines(x = xnew, cred.intervals[2,], col = "black", lty = 3)
ypred_smp <- extract(model.fit, "ypred")[[1]]
pred.intervals <- apply(ypred_smp, 2,  function(x) quantile(x=x, c(0.025, 0.975)))
lines(x = xnew, y = pred.intervals[1,], col = "cadetblue", lty = 1)
lines(x = xnew, y = pred.intervals[2,], col = "cadetblue", lty = 1)
rm(list = ls())
library(MonoPoly)
library(fda)
library(rstan)
rstan_options(auto_write = FALSE)
options(mc.cores = parallel::detectCores())
##
## Data is the onechild data from package fda
## Rescale data so that x and y are both in [0, 1]
## Remember how y was scaled to undo the scaling in later plots
##
x <- with(onechild, (day-min(day))/diff(range(day)))
y <- onechild$height
miny <- min(y)
ry <- diff(range(y))
y <- (y-miny)/ry
N <- length(x)
##
## Initial plot of the data
##
plot(x,y)
##
## Choose degree of polynomial to fit,
## as well as the region of monotonicity
## Here we want to have a polynomial monotone on [0, infinity)
## we also specific the polynomial as monotone increasing,
## by choosing alpha to be one
##
q <- 9
lower.bound <- 0
upper.bound <- Inf
alpha <- 1
##
## Given order of polynomial and bounds, figure out K and op.mode
## This is just following Proposition 2.1
##
if (lower.bound == -Inf) {
if (upper.bound == Inf) {
op.mode <- 1 # whole real line
k <- (q - 1)/2
} else {
op.mode <- 2 # (-inf, b]
if(q %% 2 == 0) {
k <- q / 2
}  else {
k <- (q - 1) / 2
}
}
} else {
if (upper.bound == Inf) {
op.mode <- 3 # [a, Inf)
if(q %% 2 == 0) {
k <- q / 2
}  else {
k <- (q - 1) / 2
}
} else {
op.mode <- 4 # [a,b]
if(q %% 2 == 0) {
k <- q / 2
}  else {
k <- (q - 1) / 2
}
}
}
if ( (poly.degree %% 2 == 0) & (op.mode == 1) ) {
stop("Fitting a monotonic polynomial to the whole real line requires q to be odd")
}
##
## Grid of values on which we want to have predictions
##
Nnew <- 101
xnew <- seq(from=min(x),to=max(x),length=Nnew)
##
## Put all the data to be passed to stan in a named list
##
data.in <- list(N = N, q = q, K = k,
operation_mode = op.mode,
y = y, x = x,
a = lower.bound, b = upper.bound,
alpha = alpha, Nnew = Nnew,
xnew = xnew)
##
## Decide on number of iterations, this depends partly on the degree
## of the polynomial.
## See the 00README file
##
iter <- 50000
beta.final.samples <- extract(model.fit, "beta_final")
beta.final <- apply(beta.final.samples[[1]], 2, mean)
##
## plot the fitted polynomial
##
plot(x,y)
lines(xnew, evalPol(xnew, beta.final))
##
## Add credible intervals and prediction intervals using the generated
## values for mupred and ypred
##
mupred_smp <- extract(model.fit, "mupred")[[1]]
cred.intervals <- apply(mupred_smp, 2, function(x) quantile(x=x, c(0.025, 0.975)))
# cred.intervals <- ry * cred.intervals + miny  ## undo the scaling of the y axis
lines(x = xnew, cred.intervals[1,], col = "black", lty = 3)
lines(x = xnew, cred.intervals[2,], col = "black", lty = 3)
ypred_smp <- extract(model.fit, "ypred")[[1]]
pred.intervals <- apply(ypred_smp, 2,  function(x) quantile(x=x, c(0.025, 0.975)))
# pred.intervals <- ry * pred.intervals + miny  ## undo the scaling of the y axis
lines(x = xnew, y = pred.intervals[1,], col = "cadetblue", lty = 1)
lines(x = xnew, y = pred.intervals[2,], col = "cadetblue", lty = 1)
model.fit <- stan("MonPolyV0_0_4.stan", data = data.in,
iter = iter, seed = 170117, chains = 2, cores = 2)
beta.final.samples <- extract(model.fit, "beta_final")
beta.final <- apply(beta.final.samples[[1]], 2, mean)
##
## plot the fitted polynomial
##
plot(x,y)
lines(xnew, evalPol(xnew, beta.final))
##
## Add credible intervals and prediction intervals using the generated
## values for mupred and ypred
##
mupred_smp <- extract(model.fit, "mupred")[[1]]
cred.intervals <- apply(mupred_smp, 2, function(x) quantile(x=x, c(0.025, 0.975)))
# cred.intervals <- ry * cred.intervals + miny  ## undo the scaling of the y axis
lines(x = xnew, cred.intervals[1,], col = "black", lty = 3)
lines(x = xnew, cred.intervals[2,], col = "black", lty = 3)
ypred_smp <- extract(model.fit, "ypred")[[1]]
pred.intervals <- apply(ypred_smp, 2,  function(x) quantile(x=x, c(0.025, 0.975)))
# pred.intervals <- ry * pred.intervals + miny  ## undo the scaling of the y axis
lines(x = xnew, y = pred.intervals[1,], col = "cadetblue", lty = 1)
lines(x = xnew, y = pred.intervals[2,], col = "cadetblue", lty = 1)
library(rstan)
library(parallel)
# data generation
# This function returns noisy data from a polynomial of requested order
GeneratePolyData <- function(data.lower, data.upper, poly.order, poly.type, n.data.points, sigma.noise,
noise.type, noise.df) {
# poly.order corresponds to 0 = intercept only, 1  =  flat line, 2 = quadratic, etc etc
x.values <- seq(from = data.lower, to = data.upper, length = n.data.points)
if (noise.type == 1) {
noise <- rnorm(n.data.points, sd = sigma.noise)
} else {
noise <- rt(n = n.data.points, df = noise.df)
}
if (poly.order < 1) {
stop("incorrect poly order")
} else if (poly.order == 1) {
beta.true <- c(1/4, 1.5)
y.values <- 1/4 + 1.5 * x.values + noise
} else if (poly.order == 2 & poly.type == 1) {
beta.true <- c(0, 0, 1)
y.values <-  x.values^2 + noise
} else if (poly.order == 2 & poly.type == 2) {
beta.true <- c(1/4, 1, 1)
y.values <- 1/4 + x.values + x.values^2 + noise
} else if (poly.order == 3) {
beta.true <- c(0,0,0,1)
y.values <-  x.values^3 + noise
} else if (poly.order == 4) {
beta.true <- c(0,0,1,0,2)
y.values <- x.values^2 + 2 * x.values^4 + noise
} else if (poly.order == 5 & poly.type == 1) {
beta.true <- c(0,0,0,0,0,1)
y.values <- x.values^5 + noise
} else if (poly.order == 5 & poly.type == 2) {
beta.true <- c(0,3,2,0,0,1)
y.values <- 3*x.values + 2*x.values^2 + x.values ^5 + noise
} else if (poly.order == 7) {
beta.true <- c(0,3,0,2,0,1,0,1)
y.values <- 3 * x.values + 2 * x.values^3 + x.values^5 + x.values^7 + noise
} else {
print("Please choose appropriate polynomial order and type")
}
output.list <- list(x.values = x.values, y.values = y.values, beta.true = beta.true)
return(output.list)
}
fitMonoPoly <- function(x.values, y.values, lower.bound, upper.bound, poly.degree,
alpha, n.new, mc.num, chains, iter, prefit = model.prefit) {
# figure out which of the cases it's going to be
# 1 == whole real line
# 2 == (-inf, b]
# 3 == [a, Inf)
# 4 == [a, b]
# then assign the appropriate value to k
op.mode <- 0
if (lower.bound == -Inf) {
if (upper.bound == Inf) {
op.mode <- 1 # whole real line
k <- (poly.degree - 1)/2
} else {
op.mode <- 2 # (-inf, b]
if(poly.degree %% 2 == 0) {
k <- poly.degree / 2
}  else {
k <- (poly.degree - 1) / 2
}
}
} else {
if (upper.bound == Inf) {
op.mode <- 3 # [a, Inf)
if(poly.degree %% 2 == 0) {
k <- poly.degree / 2
}  else {
k <- (poly.degree - 1) / 2
}
} else {
op.mode <- 4 # [a,b]
if(poly.degree %% 2 == 0) {
k <- poly.degree / 2
}  else {
k <- (poly.degree - 1) / 2
}
}
}
if ( (poly.degree %% 2 == 0) & (op.mode == 1) ) {
stop("Fitting a monotonic polynomial to the whole real line requires q to be odd")
}
# new X values for sampling the posterior predictive distribution
x.new <- seq(from = min(x.values), to = max(x.values),
length = n.new)
# put all data in named list to pass to Stan
data.in <- list(N = length(y.values), q = poly.degree, K = k,
operation_mode = op.mode,
y = y.values, x = x.values,
a = lower.bound, b = upper.bound,
alpha = alpha, Nnew = n.new,
xnew = x.new)
# fit the model in stan and return the stanfit object
model.fit <- stan(fit = prefit, data = data.in, chains = chains, cores = mc.num,
iter = iter, refresh = 100)
return(model.fit)
}
simulated.data <- GeneratePolyData(data.lower = -1, data.upper =  1,
poly.order = 7, poly.type = 2,
n.data.points = 50, sigma.noise = 0.2,
noise.type = 1, noise.df = 1)
x.new.temp <- seq(from = -1, to = 1,
length = 2*length(simulated.data$x.values)+1)
data.in.temp <- list(N = length(simulated.data$y.values), q = 1, K = 1000,
operation_mode = 1,
y = simulated.data$y.values, x = simulated.data$x.values,
a = -Inf, b = Inf,
alpha = 1, Nnew = 2*length(simulated.data$x.values)+1,
xnew = x.new.temp)
data.in.temp <- list(N = length(simulated.data$y.values), q = 8, K = 1000,
operation_mode = 1,
y = simulated.data$y.values, x = simulated.data$x.values,
a = 0, b = Inf,
alpha = 1, Nnew = 2*length(simulated.data$x.values)+1,
xnew = x.new.temp)
data.in.temp <- list(N = length(simulated.data$y.values), q = 8, K = 3,
operation_mode = 3,
y = simulated.data$y.values, x = simulated.data$x.values,
a = 0, b = Inf,
alpha = 1, Nnew = 2*length(simulated.data$x.values)+1,
xnew = x.new.temp)
model.prefit <- stan("MonPolyV0_0_4.stan", chains = 2, data = data.in.temp)
data.in.temp <- list(N = length(simulated.data$y.values), q = 8, K = 4,
operation_mode = 3,
y = simulated.data$y.values, x = simulated.data$x.values,
a = 0, b = Inf,
alpha = 1, Nnew = 2*length(simulated.data$x.values)+1,
xnew = x.new.temp)
model.prefit <- stan("MonPolyV0_0_4.stan", chains = 2, data = data.in.temp)
